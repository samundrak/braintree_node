// Generated by CoffeeScript 1.10.0
var CreditCardVerification, CreditCardVerificationGateway, CreditCardVerificationSearch, Gateway, _, exceptions, util,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Gateway = require('./gateway').Gateway;

CreditCardVerification = require('./credit_card_verification').CreditCardVerification;

CreditCardVerificationSearch = require('./credit_card_verification_search').CreditCardVerificationSearch;

util = require('util');

_ = require('underscore');

exceptions = require('./exceptions');

CreditCardVerificationGateway = (function(superClass) {
  extend(CreditCardVerificationGateway, superClass);

  function CreditCardVerificationGateway(gateway) {
    this.gateway = gateway;
    this.config = this.gateway.config;
  }

  CreditCardVerificationGateway.prototype.find = function(creditCardVerificationId, callback) {
    if (creditCardVerificationId.trim() === '') {
      return callback(exceptions.NotFoundError("Not Found"), null);
    } else {
      return this.gateway.http.get((this.config.baseMerchantPath()) + "/verifications/" + creditCardVerificationId, function(err, response) {
        if (err) {
          return callback(err, null);
        } else {
          return callback(null, new CreditCardVerification(response.verification));
        }
      });
    }
  };

  CreditCardVerificationGateway.prototype.search = function(fn, callback) {
    var search;
    search = new CreditCardVerificationSearch();
    fn(search);
    return this.createSearchResponse((this.config.baseMerchantPath()) + "/verifications/advanced_search_ids", search, this.pagingFunctionGenerator(search), callback);
  };

  CreditCardVerificationGateway.prototype.create = function(params, callback) {
    return this.gateway.http.post((this.config.baseMerchantPath()) + "/verifications", {
      "verification": params
    }, this.createResponseHandler("verification", CreditCardVerification, callback));
  };

  CreditCardVerificationGateway.prototype.responseHandler = function(callback) {
    return this.createResponseHandler("creditCardVerification", CreditCardVerification, callback);
  };

  CreditCardVerificationGateway.prototype.pagingFunctionGenerator = function(search) {
    return (function(_this) {
      return function(ids, callback) {
        var searchCriteria;
        searchCriteria = search.toHash();
        searchCriteria["ids"] = ids;
        return _this.gateway.http.post((_this.config.baseMerchantPath()) + "/verifications/advanced_search", {
          search: searchCriteria
        }, function(err, response) {
          var creditCardVerification, i, len, ref, results;
          if (err) {
            return callback(err, null);
          } else {
            if (_.isArray(response.creditCardVerifications.verification)) {
              ref = response.creditCardVerifications.verification;
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                creditCardVerification = ref[i];
                results.push(callback(null, new CreditCardVerification(creditCardVerification)));
              }
              return results;
            } else {
              return callback(null, new CreditCardVerification(response.creditCardVerifications.verification));
            }
          }
        });
      };
    })(this);
  };

  return CreditCardVerificationGateway;

})(Gateway);

exports.CreditCardVerificationGateway = CreditCardVerificationGateway;

//# sourceMappingURL=credit_card_verification_gateway.js.map

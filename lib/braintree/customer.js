// Generated by CoffeeScript 1.10.0
var AmexExpressCheckoutCard, AndroidPayCard, ApplePayCard, AttributeSetter, CoinbaseAccount, CreditCard, Customer, PayPalAccount, VenmoAccount,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AttributeSetter = require('./attribute_setter').AttributeSetter;

ApplePayCard = require('./apple_pay_card').ApplePayCard;

AndroidPayCard = require('./android_pay_card').AndroidPayCard;

AmexExpressCheckoutCard = require('./amex_express_checkout_card').AmexExpressCheckoutCard;

CreditCard = require('./credit_card').CreditCard;

PayPalAccount = require('./paypal_account').PayPalAccount;

CoinbaseAccount = require('./coinbase_account').CoinbaseAccount;

VenmoAccount = require('./venmo_account').VenmoAccount;

Customer = (function(superClass) {
  extend(Customer, superClass);

  function Customer(attributes) {
    var cardAttributes, coinbaseAccountAttributes, paypalAccountAttributes, venmoAccountAttributes;
    Customer.__super__.constructor.call(this, attributes);
    this.paymentMethods = [];
    if (attributes.creditCards) {
      this.creditCards = (function() {
        var i, len, ref, results;
        ref = attributes.creditCards;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          cardAttributes = ref[i];
          results.push(new CreditCard(cardAttributes));
        }
        return results;
      })();
      this._addPaymentMethods(this.creditCards);
    }
    if (attributes.applePayCards) {
      this.applePayCards = (function() {
        var i, len, ref, results;
        ref = attributes.applePayCards;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          cardAttributes = ref[i];
          results.push(new ApplePayCard(cardAttributes));
        }
        return results;
      })();
      this._addPaymentMethods(this.applePayCards);
    }
    if (attributes.androidPayCards) {
      this.androidPayCards = (function() {
        var i, len, ref, results;
        ref = attributes.androidPayCards;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          cardAttributes = ref[i];
          results.push(new AndroidPayCard(cardAttributes));
        }
        return results;
      })();
      this._addPaymentMethods(this.androidPayCards);
    }
    if (attributes.amexExpressCheckoutCards) {
      this.amexExpressCheckoutCards = (function() {
        var i, len, ref, results;
        ref = attributes.amexExpressCheckoutCards;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          cardAttributes = ref[i];
          results.push(new AmexExpressCheckoutCard(cardAttributes));
        }
        return results;
      })();
      this._addPaymentMethods(this.amexExpressCheckoutCards);
    }
    if (attributes.paypalAccounts) {
      this.paypalAccounts = (function() {
        var i, len, ref, results;
        ref = attributes.paypalAccounts;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          paypalAccountAttributes = ref[i];
          results.push(new PayPalAccount(paypalAccountAttributes));
        }
        return results;
      })();
      this._addPaymentMethods(this.paypalAccounts);
    }
    if (attributes.coinbaseAccounts) {
      this.coinbaseAccounts = (function() {
        var i, len, ref, results;
        ref = attributes.coinbaseAccounts;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          coinbaseAccountAttributes = ref[i];
          results.push(new CoinbaseAccount(coinbaseAccountAttributes));
        }
        return results;
      })();
      this._addPaymentMethods(this.coinbaseAccounts);
    }
    if (attributes.venmoAccounts) {
      this.venmoAccounts = (function() {
        var i, len, ref, results;
        ref = attributes.venmoAccounts;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          venmoAccountAttributes = ref[i];
          results.push(new VenmoAccount(venmoAccountAttributes));
        }
        return results;
      })();
      this._addPaymentMethods(this.venmoAccounts);
    }
  }

  Customer.prototype._addPaymentMethods = function(paymentMethods) {
    var i, len, paymentMethod, results;
    results = [];
    for (i = 0, len = paymentMethods.length; i < len; i++) {
      paymentMethod = paymentMethods[i];
      results.push(this.paymentMethods.push(paymentMethod));
    }
    return results;
  };

  return Customer;

})(AttributeSetter);

exports.Customer = Customer;

//# sourceMappingURL=customer.js.map
